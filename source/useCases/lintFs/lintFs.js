import matcherModule from './matcher/matcher.js';
import reporterModule from './reporter/reporter.js';

// Stryker disable next-line ObjectLiteral
const dependecies = {
  matcher: matcherModule,
  reporter: reporterModule,
};

const lintFs = ({
  config,
  filesystem,
  logger,
}, {
  matcher,
  reporter,
} = dependecies) => {
  return async () => {
    const [
      paths,
      filesystemError,
    ] = await filesystem.paths('.');

    if (filesystemError) {
      return [
        undefined,
        `lintFs: ${filesystemError}`,
      ];
    }

    const [
      initedConfig,
      configError,
    ] = await config.read({
      encoding: 'utf8',
      fileName: './lint-fs.yaml',
    });

    if (configError) {
      return [
        undefined,
        `lintFs: ${configError}`,
      ];
    }

    const correct = [];
    const incorrect = [];

    const {
      ignores,
      rules,
    } = initedConfig;

    for (const path of paths) {
      const [
        isIgnored,
        ignoresError,
      ] = matcher.isCorrect(path, ignores);

      if (ignoresError) {
        return [
          undefined,
          `lintFs: ${ignoresError}`,
        ];
      }

      if (isIgnored) {
        continue;
      }

      const [
        isRuled,
        rulesError,
      ] = matcher.isCorrect(path, rules);

      if (rulesError) {
        return [
          undefined,
          `lintFs: ${rulesError}`,
        ];
      }

      if (isRuled) {
        correct.push(path);
      } else {
        incorrect.push(path);
      }
    }

    const [
      _,
      reporterError,
    ] = reporter.print(logger, {
      correct,
      incorrect,
    });

    if (reporterError) {
      return [
        undefined,
        `lintFs: ${reporterError}`,
      ];
    }

    const isFileSystemIncorrect = incorrect.length > 0;
    if (isFileSystemIncorrect) {
      return [
        undefined,
        'File System Structure is Incorrect! üí¢',
      ];
    }

    // Fail on Unused Regular Expressions
    // 1. –ü–µ—Ä–µ–º–∞–ø–∏—Ç—å ignores –∏ rules –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤ –≤ map`—ã.
    // 2. –°–∫–æ—Ä–º–∏—Ç—å –∏—Ö –≤ isCorrect. –î–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –º–∞–ø—É - –∏ –±—Ä–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ Map.entries. –ï—Å–ª–∏ regexp –ø–æ–¥–æ—à–µ–ª, —Ç–æ —Å—Ç–∞–≤—å –≤ –º–∞–ø—É true.
    // 3. –û—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏. –¶–≤–µ—Ç –æ—Ä–∞–Ω–∂–µ–≤—ã–π. –ù–∞–∑–≤–∞—Ç—å —Ç–∏–ø–æ excessive regexps.
    // 4. –ù–∞–¥–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–æ–±—â–µ –≤—Å–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ / —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ lintFs.js

    return [];
  };
};

export default lintFs;
